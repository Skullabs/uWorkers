package {{packageName}};

{{^name}}
@trip.spi.Singleton( exposedAs=uworkers.api.Consumer.class )
{{/name}}
{{#name}}
@trip.spi.Singleton( exposedAs=uworkers.api.Consumer.class, name="{{.}}" )
@uworkers.api.Subscriber( name="{{.}}" )
{{/name}}
@uworkers.api.Autostart
public class {{typeName}}AutoGenerated{{consumerName}}{{consumerMethod}} extends uworkers.core.AbstractSubscriber<{{type}}> {

	@trip.spi.Provided trip.spi.ServiceProvider provider;
	@trip.spi.Provided uworkers.core.endpoint.MQProvider mqProvider;
	String endpointName = "{{{endpointName}}}";

	public void handle( final {{type}} context )
			throws uworkers.api.WorkerException {
		try {
			{{^exposedAs}}
			final {{consumer}} consumer = new {{consumer}}();
			provider.provideOn( consumer );
			{{/exposedAs}}
			{{#exposedAs}}
			final {{exposedAs}} consumer = provider.load( {{exposedAs}}.class );
			{{/exposedAs}}
			consumer.{{consumerMethod}}( context );
		} catch( Throwable cause ) {
			throw new uworkers.api.WorkerException( cause );
		}
	}

	public String endpointName() {
		return endpointName;
	}

	public Class<{{type}}> getExpectedObjectClass() {
		return {{type}}.class;
	}

	public uworkers.core.AbstractSubscriber<{{type}}> endpointName(
			final String endpointName ) {
		this.endpointName = endpointName;
		return this;
	}

	protected uworkers.core.endpoint.MQProvider mqProvider() {
		return mqProvider;
	}
}